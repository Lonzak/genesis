package com.projetloki.genesis.image;

import static com.google.common.base.Preconditions.checkNotNull;

import com.google.common.hash.PrimitiveSink;

/**
 * A shape generated by a shaper and that holds a reference to it. Two shapes
 * are equal if they were generated by the same shaper, and with the same size
 * was passed to {@link Shaper#getShape(int, int)}.
 *
 * @author Cl√©ment Roux
 */
abstract class ShapeWithShaperAsSerializationProxy
    extends ShapeWithSerializationProxy<ShapeWithShaperAsSerializationProxy> {
  final Shaper shaper;
  final int width;
  final int height;
  final double margin;

  ShapeWithShaperAsSerializationProxy(Shaper shaper, int width, int height,
      double margin) {
    this.shaper = checkNotNull(shaper);
    this.width = width;
    this.height = height;
    this.margin = margin;
  }

  @Override final void doHash(PrimitiveSink sink) {
    sink.putLong(5922548966716288673L)
        .putBytes(shaper.hash().asBytes())
        .putInt(width)
        .putInt(height)
        .putDouble(margin);
  }

  @Override final SerializationProxy<Shape> doWriteReplace() {
    return serializationProxy(shaper, width, height, margin);
  }

  private static SerializationProxy<Shape> serializationProxy(
      final Shaper shaper,
      final int width,
      final int height,
      final double margin) {
    return new SerializationProxy<Shape>() {
      @Override Shape doReadResolve() {
        Shape result = shaper.getShape(width, height);
        if (margin != 0) {
          result = result.shrink(margin);
        }
        return result;
      }
      private static final long serialVersionUID = 0;
    };
  }

  @Override final boolean doEquals(ShapeWithShaperAsSerializationProxy that) {
    return shaper.equals(that.shaper) &&
        width == that.width && height == that.height && margin == that.margin;
  }

  @Override public final String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(shaper)
        .append(".getShape(")
        .append(width)
        .append(", ")
        .append(height)
        .append(")");
    if (margin != 0) {
      builder.append(".shrink(");
      builder.append(margin);
      builder.append(")");
    }
    return builder.toString();
  }
}
